/*\/**
 * Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 * This software is the confidential and proprietary information of wavemaker-com * You shall not disclose such Confidential Information and shall use it only in accordance
 * with the terms of the source code license agreement you entered into with wavemaker.com *\/*/
package com.testdefaultprefabs.bubbledata.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testdefaultprefabs.bubbledata.Bubble;
import com.testdefaultprefabs.bubbledata.service.BubbleService;


/**
 * Controller object for domain model class Bubble.
 * @see Bubble
 */
@RestController("bubbledata.BubbleController")
@Api(value = "BubbleController", description = "Exposes APIs to work with Bubble resource.")
@RequestMapping("/bubbledata/Bubble")
public class BubbleController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BubbleController.class);

    @Autowired
	@Qualifier("bubbledata.BubbleService")
	private BubbleService bubbleService;

	@ApiOperation(value = "Creates a new Bubble instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public Bubble createBubble(@RequestBody Bubble bubble) {
		LOGGER.debug("Create Bubble with information: {}" , bubble);

		bubble = bubbleService.create(bubble);
		LOGGER.debug("Created Bubble with information: {}" , bubble);

	    return bubble;
	}

    @ApiOperation(value = "Returns the Bubble instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Bubble getBubble(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Bubble with id: {}" , id);

        Bubble foundBubble = bubbleService.getById(id);
        LOGGER.debug("Bubble details with id: {}" , foundBubble);

        return foundBubble;
    }

    @ApiOperation(value = "Updates the Bubble instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Bubble editBubble(@PathVariable("id") Integer id, @RequestBody Bubble bubble) throws EntityNotFoundException {
        LOGGER.debug("Editing Bubble with id: {}" , bubble.getId());

        bubble.setId(id);
        bubble = bubbleService.update(bubble);
        LOGGER.debug("Bubble details with id: {}" , bubble);

        return bubble;
    }

    @ApiOperation(value = "Deletes the Bubble instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBubble(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Bubble with id: {}" , id);

        Bubble deletedBubble = bubbleService.delete(id);

        return deletedBubble != null;
    }

    /**
     * @deprecated Use {@link #findBubbles(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Bubble instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Bubble> searchBubblesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Bubbles list");
        return bubbleService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Bubble instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Bubble> findBubbles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Bubbles list");
        return bubbleService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Bubble instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Bubble> filterBubbles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Bubbles list");
        return bubbleService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBubbles(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return bubbleService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Bubble instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countBubbles( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Bubbles");
		return bubbleService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getBubbleAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return bubbleService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BubbleService instance
	 */
	protected void setBubbleService(BubbleService service) {
		this.bubbleService = service;
	}

}

